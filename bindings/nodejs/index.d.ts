/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare class Model {
  constructor(name: string, locale: string, timezone: string)
  static fromBytes(bytes: Uint8Array): Model
  canUndo(): boolean
  canRedo(): boolean
  pauseEvaluation(): void
  resumeEvaluation(): void
  flushSendQueue(): Array<number>
  applyExternalDiffs(diffs: Uint8Array): void
  getCellContent(sheet: number, row: number, column: number): string
  newSheet(): void
  deleteSheet(sheet: number): void
  hideSheet(sheet: number): void
  unhideSheet(sheet: number): void
  renameSheet(sheet: number, name: string): void
  setSheetColor(sheet: number, color: string): void
  rangeClearAll(sheet: number, startRow: number, startColumn: number, endRow: number, endColumn: number): void
  rangeClearContents(sheet: number, startRow: number, startColumn: number, endRow: number, endColumn: number): void
  insertRow(sheet: number, row: number): void
  insertColumn(sheet: number, column: number): void
  deleteRow(sheet: number, row: number): void
  deleteColumn(sheet: number, column: number): void
  setRowHeight(sheet: number, row: number, height: number): void
  setColumnWidth(sheet: number, column: number, width: number): void
  getRowHeight(sheet: number, row: number): number
  getColumnWidth(sheet: number, column: number): number
  setUserInput(sheet: number, row: number, column: number, input: string): void
  getFormattedCellValue(sheet: number, row: number, column: number): string
  getFrozenRowsCount(sheet: number): number
  getFrozenColumnsCount(sheet: number): number
  setFrozenRowsCount(sheet: number, count: number): void
  setFrozenColumnsCount(sheet: number, count: number): void
  updateRangeStyle(range: unknown, stylePath: string, value: string): void
  getCellStyle(sheet: number, row: number, column: number): unknown
  onPasteStyles(styles: unknown): void
  getCellType(sheet: number, row: number, column: number): number
  getWorksheetsProperties(): unknown
  getSelectedSheet(): number
  getSelectedCell(): Array<number>
  getSelectedView(): unknown
  setSelectedSheet(sheet: number): void
  setSelectedCell(row: number, column: number): void
  setSelectedRange(startRow: number, startColumn: number, endRow: number, endColumn: number): void
  setTopLeftVisibleCell(topRow: number, topColumn: number): void
  setShowGridLines(sheet: number, showGridLines: boolean): void
  getShowGridLines(sheet: number): boolean
  autoFillRows(sourceArea: unknown, toRow: number): void
  autoFillColumns(sourceArea: unknown, toColumn: number): void
  onArrowRight(): void
  onArrowLeft(): void
  onArrowUp(): void
  onArrowDown(): void
  onPageDown(): void
  onPageUp(): void
  setWindowWidth(windowWidth: number): void
  setWindowHeight(windowHeight: number): void
  getScrollX(): number
  getScrollY(): number
  onExpandSelectedRange(key: string): void
  onAreaSelecting(targetRow: number, targetColumn: number): void
  setAreaWithBorder(area: unknown, borderArea: unknown): void
  toBytes(): Array<number>
  getName(): string
  setName(name: string): void
  copyToClipboard(): unknown
  pasteFromClipboard(sourceSheet: number, sourceRange: unknown, clipboard: unknown, isCut: boolean): void
  pasteCsvText(area: unknown, csv: string): void
  getDefinedNameList(): unknown
  newDefinedName(name: string, scope: number | undefined | null, formula: string): void
  updateDefinedName(name: string, scope: number | undefined | null, newName: string, newScope: number | undefined | null, newFormula: string): void
  deleteDefinedName(name: string, scope?: number | undefined | null): void
}
